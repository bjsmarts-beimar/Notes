

===================================================================
 INITIAL CLIENT IMPLEMENTATION
===================================================================

. Install grunt bower generator angular
> npm install -g grunt-cli bower yo generator-karma generator-angular

. generate the project
> yo angular

. Run the application to test the initial setup.
> grunt 
> grunt serve

. Create view
yo angular:view register

. Install angular UI Router, toaster, angular-bootstrap
bower install angular-ui-router --save
bower install angular-bootstrap#0.11.0 --save
bower install angular-toastr --save

. Add 'ui.router', 'toastr', 'ui.bootstrap' to Angular Module on app.js

. add the Application Configuration file app.config.js to the project

. add the following code to app.config.js file

angular.module('jwtAppApp').config(function($urlRouterProvider, $stateProvider) {
    $urlRouterProvider.otherwise('/');
    $stateProvider
    .state('main', {
        url: '/',
        templateUrl: '/views/main.html'
    })
    .state('register', {
        url: '/register',
        templateUrl: '/views/register.html',
        controller: 'RegisterCtrl'
    });
})

. Add the app.config.js reference on the index.html
<script src="scripts/app.config.js"></script>

. remove ng-include and add ui-view on index.html

<div ui-view></div>
<div ng-include="'views/main.html'" ng-controller="MainCtrl"></div>

. Modify the Navigation

    <ul class="nav navbar-nav">
        <li ui-sref-active="active"><a ui-sref="main">Home</a></li>
        <li ui-sref-active="active"><a ui-sref="register">Register</a></li>
    </ul>
. 

. How to reference 'toastr' alerts

toastr.success("register successfully");
toastr.error("Failed to register");

. Add the register controller
yo angular:controller register

. Add the following code to register view
      <div class="container">
			<div class="row main">
				<div class="panel-heading">
	               <div class="panel-title text-center">
	               		<h1 class="title">Register</h1>
	               		
	               	</div>
	            </div> 
				<div class="main-login main-center">
					<form ng-submit="submit()" name="register" class="form-horizontal" novalidate>
						
						<div class="form-group">
							<label for="name" class="cols-sm-2 control-label">Your Name</label>
							<div class="cols-sm-10">
								<div class="input-group">
									<span class="input-group-addon"><i class="fa fa-user fa" aria-hidden="true"></i></span>
									<input type="text" class="form-control" name="name" id="name"  placeholder="Enter your Name"/>
								</div>
							</div>
						</div>

						<div class="form-group">
							<label for="email" class="cols-sm-2 control-label">Your Email</label>
							<div class="cols-sm-10">
								<div class="input-group">
									<span class="input-group-addon"><i class="fa fa-envelope fa" aria-hidden="true"></i></span>
									<input type="text" class="form-control" name="email" id="email"  placeholder="Enter your Email"/>
								</div>
							</div>
						</div>

						<div class="form-group">
							<label for="username" class="cols-sm-2 control-label">Username</label>
							<div class="cols-sm-10">
								<div class="input-group">
									<span class="input-group-addon"><i class="fa fa-users fa" aria-hidden="true"></i></span>
									<input type="text" class="form-control" name="username" id="username"  placeholder="Enter your Username"/>
								</div>
							</div>
						</div>

						<div class="form-group">
							<label for="password" class="cols-sm-2 control-label">Password</label>
							<div class="cols-sm-10">
								<div class="input-group">
									<span class="input-group-addon"><i class="fa fa-lock fa-lg" aria-hidden="true"></i></span>
									<input type="password" class="form-control" name="password" id="password"  placeholder="Enter your Password"/>
								</div>
							</div>
						</div>

						<div class="form-group">
							<label for="confirm" class="cols-sm-2 control-label">Confirm Password</label>
							<div class="cols-sm-10">
								<div class="input-group">
									<span class="input-group-addon"><i class="fa fa-lock fa-lg" aria-hidden="true"></i></span>
									<input type="password" class="form-control" name="confirm" id="confirm"  placeholder="Confirm your Password"/>
								</div>
							</div>
						</div>

						<div class="form-group ">
							<button type="submit" class="btn btn-primary btn-lg btn-block login-button">Register</button>
						</div>
						<div class="login-register">
				            <a href="#">Login</a>
				         </div>
					</form>
				</div>
			</div>
		</div>

. Add the following code to main stylesheet

.main-login{
 	background-color: #eee;
    /* shadows and rounded borders */
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);

}

.main-center{
 	margin-top: 30px;
 	margin: 0 auto;
 	max-width: 330px;
    padding: 40px 40px;

}

.login-button{
	margin-top: 5px;
}

.login-register{
	font-size: 11px;
	text-align: center;
}

. Add the following code to register controller

'use strict';

angular.module('jwtAppApp')
  .controller('RegisterCtrl', function ($scope, $http, toastr) {
    $scope.submit = function() {
      var url = 'http://localhost:3000/register';
      var user = {
        name: 'Alex'
      };
      
      $http
        .post(url, user)
        .then(function(res) {
           //toastr.success("register successfully");
           toastr.success("You have registered successfully", "Register Status", {
             positionClass: 'toast-bottom-full-width'
           })
        }, function(err) {
           toastr.error("Failed register, Please contact you Administrator", "Register Status", {
             positionClass: 'toast-bottom-full-width'
           })
        });
    }
  });

. Add the register.js reference on the index.html
<script src="scripts/controllers/register.js"></script>

=========================================================================
 INITIAL SERVER IMPLEMENTATION
=========================================================================

. Create "FrontEnd" folder and copy all files but .git files 

. Create "Api" Folder 

. Go inside "Api" folder

. run "> npm init" to initialize "nodejs" project

. run "touch api.js"

. add Express, mongoose, body-parser 
> npm install express mongoose body-parser --save

. open api.js and add the following code

// call the packages we need
var express    = require('express');        // call express
var app        = express();                 // define our app using express
var bodyParser = require('body-parser');

// configure app to use bodyParser()
// this will let us get the data from a POST
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

var port = process.env.PORT || 3000;        // set our port

//middleware goes here
app.use(function(req, res, next) {
    // adding CORS
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Methods", "GET,PUT,POST,DELETE");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    console.log('Cors has been added.');
    
    next(); // make sure we go to the next routes and don't stop here
});

// more routes for our API will happen here
app.post('/register', function(req, res) {
    console.log(req.body);
    res.send("hi");
})

// START THE SERVER
// =============================================================================
app.listen(port);
console.log('REST API Server listen on port ' + port);

. Open package.json
"start": "node api.js"

. Test the Initial Setup


    


